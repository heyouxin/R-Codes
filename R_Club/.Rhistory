apply(mtcars,c[1,3,4,5,6,7],2,median)
apply(mtcars,c[1,3,4,5,6,7],2,median)
apply(mtcars[c(1,3,4,5,6,7)],2,median)
apply(mtcars[,c(1,3,4,5,6,7)],2,median)
#include <Rcpp.h>
using namespace Rcpp;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
// You can include R code blocks in C++ files processed with sourceCpp
// (useful for testing and development). The R code will be automatically
// run after the compilation.
//
/*** R
timesTwo(42)
*/
#include <Rcpp.h>
using namespace Rcpp;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
// You can include R code blocks in C++ files processed with sourceCpp
// (useful for testing and development). The R code will be automatically
// run after the compilation.
//
timesTwo(42)
head(USArrests)
substr(states,1,4)
attach(USArrests)
substr(states,1,4)
substr(X=states,1,4)
STATES=rownames(USArrests)
substr(X=states,1,4)
substr(X=STATES,1,4)
STATES=rownames(USArrests)
substr(STATES,1,4)
state_chars <- nchar(STATES)
state_chars
hist(state_chars)
grep("w",STATES)
STATES[grep("w",STATES),]
STATES[,grep("w",STATES)]
STATES[grep("w",STATES)]
STATES[grep("[Ww]",STATES)]
head(USArrests)
substr(STATES,1,4)
STATES=rownames(USArrests)
state_chars <- nchar(STATES)
state_chars
hist(state_chars)
STATES[grep("w",STATES)]
STATES[grep("[Ww]",STATES)]
grep("w",states,ignore.case = T)
STATES[grep("w",STATES,ignore.case = T)]
library(stringr)
str_count(STATES,"a")
vowels <- c("a","e","i","o","u")
str_count(STATES,vowels)
str_extract_all(test_vector,"[3$]")
test_vector<-c("a1","33","4")
str_extract_all(test_vector,"[3$]")
str_extract_all(test_vector,"[4$]")
str_extract_all(test_vector,".")
test_vector<-c("a1","33","\n","4")
str_extract_all(test_vector,".")
str_extract_all(test_vector,"\n")
test_vector
head(USArrests)
substr(STATES,1,4)
STATES=rownames(USArrests)
state_chars <- nchar(STATES)
state_chars
hist(state_chars)
STATES[grep("w",STATES)]
STATES[grep("[Ww]",STATES)]
STATES[grep("w",STATES,ignore.case = T)]
library(stringr)
str_count(STATES,"a")
vowels <- c("a","e","i","o","u")
str_count(STATES,vowels)
test_vector<-c("a1","33","\n","4")
test_vector
str_extract_all(test_vector,"[4$]")
str_extract_all(test_vector,"\n")
library(dplyr)
library(quantmod)
library(ggplot2)
data("mtcars")
attach(mtcars)
plot(wt,mpg)
pdf("./file/mypdf.pdf")
install.packages("gcookbook")
library(quantmod)
library(ggplot2)
data("mtcars")
hist(mpg,breaks = 4)
attach(mtcars)
hist(mpg,breaks = 4)
ggplot(mtcars)
hist(mpg,breaks = 4)
hist(mtcars$mpg,breaks = 4)
hist(mtcars$mpg,breaks = 4)
hist(mtcars$mpg,breaks = 4)
hist(mtcars$mpg,breaks = 4)
hist(mtcars$mpg,breaks = 4)
hist(mtcars$mpg,breaks = 5)
hist(mtcars$mpg,breaks = 5)
hist(mtcars$mpg,breaks = 5)
hist(mtcars$mpg,breaks = 10)
ggplot(mtcars,aes(x=mpg)+geom_histogram(bins = 30))
library(ggplot2)
ggplot(mtcars,aes(x=mpg)+geom_histogram(bins = 30))
ggplot(mtcars,aes(x=mpg)+geom_histogram(bins = 30))
?ggplot
ggplot(mtcars,aes(mpg)+geom_histogram(bins = 30))
ggplot(mtcars,aes(x=mpg)+geom_boxplot(color='red'))
ggplot(mtcars,aes(x=mpg))
ggplot(mtcars,aes(x=mpg)+geom_boxplot(color='red'))
ggplot(mtcars,aes(x=mpg))+geom_boxplot(color='red')
ggplot(mtcars,aes(x=mpg))+geom_histogram(bins = 30)
dose <- c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)
opar <- par(no.readonly = T)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar)
par(opar)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar)
EDINEQ<-read.xlsx("C:\\Users\\heyouxin\\Desktop\\EDINEQ.xlsx",header=T,1,encoding = "UTF-8")
library(xlsx)
library(reshape2)
EDINEQ<-read.xlsx("C:\\Users\\heyouxin\\Desktop\\EDINEQ.xlsx",header=T,1,encoding = "UTF-8")
EDINEQ
na.rm(EDINEQ)
na.omit(EDINEQ)
EDINEQ
na.omit(EDINEQ)
EDINEQ
EDINEQ <- na.omit(EDINEQ)
EDINEQ
GR<-read.xlsx("C:\\Users\\heyouxin\\Desktop\\GR.xlsx",header=T,1,encoding="UTF-8")
GR <- na.omit(GR)
GR
EDINEQ
rm(list=ls())
#library(openxlsx)
library(xlsx)
library(stringr)
library(splitstackshape)
filename<-"./advEconometric_homework_files/consumption_data.xlsx"
raw_data<-read.xlsx(filename,sheetName = 1,encoding = "UTF-8")
#获取列名
col_name<-names(raw_data)
#按“ ”符号分割表内数据
data<-cSplit(raw_data,col_name," ")
#View(data)
#重命令列名
names(data)<-c("OBS","year","quarter","YD","CE")
#View(data)
#y_q <- paste0(data$year,"-0",data$quarter)
#y_q <- as.character.Date(y_q)
log_c <- log(data$CE)
log_c_1 <- c()
log_c_1[2:200] <- log_c[1:199]
log_c_1[1] <- NA
log_y <- log(data$YD)
log_y_1 <- c()
log_y_1[2:200] <- log_y[1:199]
log_y_1[1] <- NA
data <- cbind(data,log_c)
data <- cbind(data,log_y)
data <- cbind(data,log_c_1)
data <- cbind(data,log_y_1)
delta_c <- c()
delta_y <- c()
delta_c[2:200] <- diff(log_c)
delta_c[1] <- NA
delta_y[2:200] <- diff(log_y)
delta_y[1] <- NA
data <- cbind(data,delta_c)
data <- cbind(data,delta_y)
View(data)
fit1 <- lm(log_c~log_c_1+log_y+delta_y)
summary(fit1)
fit2 <- lm(delta_c~log_c_1+delta_y+log_y_1)
summary(fit2)
#write.xlsx(data,"./advEconometric_homework_files/data_adjusted.xlsx",row.names = F)
rm(list=ls())
#library(openxlsx)
library(xlsx)
library(stringr)
library(splitstackshape)
filename<-"./advEconometric_homework_files/consumption_data.xlsx"
raw_data<-read.xlsx(filename,sheetName = 1,encoding = "UTF-8")
library(xlsx)
library(stringr)
library(splitstackshape)
filename<-"./advEconometric_homework_files/consumption_data.xlsx"
raw_data<-read.xlsx(filename,sheetName = 1,encoding = "UTF-8")
library(RMySQL)
install.packages("RMySQL")
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
library(RMySQL)
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
library(sqldf)
data <- sqldf("select * from world where Code='cn' ")
data <- sqldf("select * from country where Code='cn' ")
data2 <- sqldf("select * from country where Code='cn'",dbname="world",drv="MySQL",user="root",password="123456",host="127.0.0.1",port=3306)
res <- dbSendQuery(conn, "SELECT * FROM country where Code='cn'")
View(res)
res <- dbSendQuery(conn, "SELECT * FROM country")
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
res <- dbSendQuery(conn, "SELECT * FROM country")
View(res)
res <- dbSendQuery(conn, "SELECT * FROM country;")
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
res <- dbSendQuery(conn, "SELECT * FROM country;")
dbFetch(res)
res <- dbSendQuery(conn, "SELECT * FROM country where Code='cn';")
dbFetch(res)
res <- dbSendQuery(conn, "SELECT * FROM country;")
data <- dbFetch(res, n=2)
data
View(data)
res <- dbSendQuery(conn, "SELECT * FROM country where Code='CHN';")
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
res <- dbSendQuery(conn, "SELECT * FROM country where Code='CHN';")
data <- dbFetch(res)
data
View(data)
dbClearResult(res)
dbDisconnect(con)
dbDisconnect(conn)
dbClearResult(res)
dbDisconnect(conn)
res <- dbSendQuery(conn, "SELECT * FROM country where Code='CHN';")
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
res <- dbSendQuery(conn, "SELECT * FROM country where Code='CHN';")
res
data <- dbFetch(res)
data
res2 <- dbSendQuery(conn, "update country set Code='CNN' where Code='CHN';")
res2 <- dbSendQuery(conn, "update country set Code2='CNN' where Code='CHN';")
conn <- dbConnect(MySQL(), dbname = "world", username="root", password="123456", host="127.0.0.1", port=3306)
res2 <- dbSendQuery(conn, "update country set Code2='CNN' where Code='CHN';")
res2 <- dbSendQuery(conn, "update country set Code2='nc' where Code='CHN';")
data2 <- dbFetch(res2)
data2
res <- dbSendQuery(conn, "SELECT * FROM country where Code='CHN';")
data <- dbFetch(res)
data
res2 <- dbSendQuery(conn, "update country set Code2='CN' where Code='CHN';")
res <- dbSendQuery(conn, "SELECT * FROM country where Code='CHN';")
data <- dbFetch(res)
data
filename <- dir("./Data/")
filename
str(iris)
str(iris)
library(party)
install.packages("party")
str(iris)
set.seed(1234)
ind <- sample(2,nrow(iris),replace = T,prob=c(0.7,0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(party)
myFormula <- Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width
iris_ctree <- ctree(myFormula,data=trainData)
table(predict(iris_ctree),trainData$Species)
plot(iris_ctree)
