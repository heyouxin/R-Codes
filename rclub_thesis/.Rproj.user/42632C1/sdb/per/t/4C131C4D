{
    "collab_server" : "",
    "contents" : "library(InformationValue)\nlibrary(plyr)\nlibrary(smbinning)\ndata <- read.csv(\"test_data.csv\")\ndata <- data[,-1]\n##R包里 负例是0，正例是1  ！！！\ndata$isdefault <- 1\ndata[data$default==1,'isdefault'] <- 0\nIV(X=as.factor(data[,\"industry_name\"]),Y=as.factor(data[,\"isdefault\"]))\nWOETable(X=as.factor(data[,\"industry_name\"]),Y=as.factor(data[,\"isdefault\"]))\nassign(paste(\"iv_table_\",\"industry_name\",sep=\"\"),ddply(data,c(\"industry_name\"),summarise,N=length(default),Good=length(default)-sum(default),Bad=sum(default),Good_pct=(length(default)-sum(default))/length(default),Bad_pct=sum(default)/length(default)))\na <- get(paste(\"iv_table_\",\"industry_name\",sep=\"\"))\nassign(paste(\"iv_table_\",\"industry_name\",sep=\"\"),a[order(-a$Bad_pct),])\nprint(get(paste(\"iv_table_\",\"industry_name\",sep=\"\")))\n\ndata$industry_name_seg <- ifelse(data$industry_name %in% c(\"制造业\",\"采矿业\",\"建筑业\"),1,\n                                 ifelse(data$industry_name %in% c(\"交通运输、仓储和邮政业\",\"电力、热力、燃气及水生产和供应业\",\"综合\"),2,\nifelse(data$industry_name %in% c(\"房地产业\",\"金融业\",\"农、林、牧、渔业\",\"批发和零售业\",\"卫生和社会工作\",\"文化、体育和娱乐业\",\"信息传输、软件和信息技术服务业\",\"住宿和餐饮业\"),3,4)))\nWOETable(X=as.factor(data$industry_name_seg),Y=as.factor(data$default))\nIV(X=as.factor(data$industry_name_seg),Y=as.factor(data$default))\n\ndata$industry_name_WOE <- WOE(as.factor(data$industry_name_seg),as.factor(data$default))\ndata$industry_name_coutpoint <- as.character(data$industry_name_seg)\n\ndata_WOE <- data.frame(\"default\"=data$default,\"industry\"=data$industry_name_WOE)\ndata_WOE$default <- data$default\ndata_WOE$industry_WOE <- data$industry_name_WOE\n\n#定量指标\nquant_vars <- setdiff(colnames(data),c(\"industry_name\",\"industry_name_seg\",\"industry_name_WOE\",\"industry_name_coutpoint\"))\nquant_kb <- data[,quant_vars]\nquant_kb$isdefault <- 1\nquant_kb[quant_kb$default==1,'isdefault'] <- 0\n\nivs <- c()\nvars <- c()\nindex <- c()\n\n\n#最优分箱\nfor (i in 2:(ncol(quant_kb)-1)) \n{\n  assign(paste(\"result_\",colnames(quant_kb)[i],sep=\"\"),\n         smbinning(df=quant_kb,y='isdefault',x=colnames(quant_kb)[i],p=0.05))\n  result <- get(paste(\"result_\",colnames(quant_kb)[i],sep=\"\"))\n  #if (T)\n  if( (result[1]!=\"uniques values of x<10\") & (result[1]!=\"No significant splits\"))\n  {\n    index <- c(index,i)\n    vars <- c(vars,result$x)\n    ivs <- c(ivs,result$iv)\n  }\n  \n}\nquant_ivs <- as.data.frame(cbind(index,vars,ivs))\nquant_ivs_sort <- quant_ivs[order(quant_ivs$ivs,decreasing=T),]\nhead(quant_ivs_sort,20)\nresult_saleat_mean\nsaleat_mean_cutpoint <- c()\nsaleat_mean_woe <- c()\nsaleat_mean <- quant_kb[,\"saleat_mean\"]\nfor (i in 1:length(saleat_mean)) \n{\n  \n  if(is.na(saleat_mean[i]))\n  {\n    saleat_mean_cutpoint[i] <- \"NA\"\n    saleat_mean_woe[i] <- -1.1415\n    \n  }\n  else\n  {\n    if(saleat_mean[i]<=0.0176)\n  \n    {\n  \n      saleat_mean_cutpoint[i] <- \"<=0.0176\"\n    \n      saleat_mean_woe[i] <- -1.0493\n  \n    }\n    if(saleat_mean[i]<=0.0576 & saleat_mean[i]>0.0176)\n      \n    {\n      \n      saleat_mean_cutpoint[i] <- \"<=0.0576\"\n      \n      saleat_mean_woe[i] <- 3.3916\n      \n    }\n    if(saleat_mean[i]<=0.0892)\n      \n    {\n      \n      saleat_mean_cutpoint[i] <- \"<=0.0892\"\n      \n      saleat_mean_woe[i] <- 0.1297\n      \n    }\n    if(saleat_mean[i]> 0.0892)\n      \n    {\n      \n      saleat_mean_cutpoint[i] <- \">0.0892\"\n      \n      saleat_mean_woe[i] <- -1.1415\n      \n    }\n  }\n  \n}\n\nmodel_data_WOE <- data.frame(quant_kb[\"isdefault\"],\"saleat_mean_woe\"=saleat_mean_woe)\nlogr <- glm(isdefault~.,data=model_data_WOE,family = binomial)\npredicted_ori <- predict(logr,type = 'response')\nsummary(logr)\n#library(pROC)\nalpha_beta <- function(basepoints,baseodds,pdo)\n{\n  beta <- pdo/log(2)\n  alpha <- basepoints+beta*log(baseodds)\n  return(list(alpha=alpha,beta=beta))\n}\nx <- alpha_beta(600,1,20)\nx\ncof <- logr$coefficients\nbasepoin <- round(x$alpha-x$beta*cof[1],1)\nbasepoin\n\n#输出评分卡\nr1 <- c(\"intercept\",600,basepoin)\nscorecard_output <- matrix(r1,nrow = 1)\nfor (i in 2:ncol(model_data_WOE)) \n{\n  assign(paste(strsplit(colnames(model_data_WOE)[i],\"_WOE\")[[1]],\"score\",sep = \"_\"),\n         round(as.matrix(-(as.numeric(model_data_WOE[[i]])*\n                             cof[colnames(model_data_WOE)[i]]*x$beta)),1))\n  \n  assign(paste(strsplit(colnames(model_data_WOE)[i],\"_WOE\")[[1]],\"scoreCard\",sep = \"_\"),\n         cbind(\n           c(strsplit(colnames(model_data_WOE)[i],\"_WOE\")[[1]]),unique(\n         cbind(\n             get(paste(strsplit(colnames(model_data_WOE)[i],\"_WOE\")[[1]],\"cutpoint\",sep = \"_\")),\n             get(paste(strsplit(colnames(model_data_WOE)[i],\"_WOE\")[[1]],\"score\",sep = \"_\"))\n           )\n         )\n         ))\n\n\n\n\n  scorecard_output <- rbind(scorecard_output,paste(get(strsplit(colnames(model_data_WOE)[i],\"_WOE\")[[1]],\"scoreCard\",sep = \"_\")))\n         \n}\n\npredited1 <- x$alpha-x$beta*log(predicted_ori/(1-predited_ori))\n\nscore_foreach <- matrix(nrow=nrow(model_data_WOE),ncol = ncol(model_data_WOE))\n\n\nfor (j in 2:ncol(model_data_WOE)) \n{\n  \n  #model_data_WOE[[j]]*cof[colnames(model_data_WOE)[j]]*x$beta\n  assign(paste(strsplit(colnames(model_data_WOE)[j],\"_woe\")[[1]],\"score\",sep = \"_\"),\n         round(as.matrix(-(model_data_WOE[[j]]*cof[colnames(model_data_WOE)[j]]*x$beta)),1))\n  \n  score_foreach[,j] <- get(paste(strsplit(colnames(model_data_WOE)[j],\"_woe\")[[1]],\"score\",sep=\"_\"))\n  \n  \n  \n}\n\nscore_foreach <- as.data.frame(score_foreach)\n\nscore_foreach['is_default'] <- data_WOE$default\n\n",
    "created" : 1533192970420.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "683376405",
    "id" : "4C131C4D",
    "lastKnownWriteTime" : 1531979858,
    "last_content_update" : 1531979858,
    "path" : "~/R Codes/pingan_credit/main.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}