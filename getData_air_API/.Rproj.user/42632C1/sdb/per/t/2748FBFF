{
    "collab_server" : "",
    "contents" : "####################################\n# project name: Baiten_getData by RSelenium\n# author: hyx\n# date:2016.12.1-2016.12.3\n# key words: web scrapy js R  rvest RSelenium\n# version: v1.0.0\n# ####################################\n# Questions&next version:\n# ####Q1: R里的初始化  data_get <- data.frame() ？？\n# ####Q2: R里的多线程  R里不能做多线程，只有并行计算，只能用多进程代替，开多个RStudio\n# ####Q3：RSelenium包里navigate函数访问网页timeout 原代码获得？重写？chapter1\n# ####Q4: R里的断点、调试？\n# ####Q5: firefox(version 36?) browse how to do it? firefox version problem \n# ####并行计算机library(parallel)\n# ####源代码 remoteDriver.R errorHandler.R  queryRD =    \n# ####引入tryCatch()\n# ####remoteDriver\n######################################\n  \n\n\n###rm(list=ls())\n###ctrl+shift+c段落注释\n\n\nlibrary(httr)\nlibrary(rvest)\nlibrary(RSelenium)\n \n#读取第二次以后的所有页面及分页\nopenHtml <- function(url,firmname)\n# openHtml <- function(x)\n{\n  # url_data <- read.csv(\"url_firmname.csv\",header = T)\n  # #View(url_data)\n  # site <- as.character(url_data$url)\n  # name <- url_data$firmname\n  \n  \n  #data_get初始化\n  data_get <- data.frame()\n  remDr$navigate(url)\n  # firmname <- name[x]\n  # remDr$navigate(site[x])\n  #totalCount\n  #class(totalCount)\n  webElem_totalcount <- remDr$findElements(using = 'css selector', \"#sop-totalCount\")\n  totalCount <- unlist(lapply(webElem_totalcount, function(x){x$getElementText()}))\n  while(is.null(totalCount))\n  {\n    webElem_totalcount <- remDr$findElements(using = 'css selector', \"#sop-totalCount\")\n    totalCount <- unlist(lapply(webElem_totalcount, function(x){x$getElementText()}))\n    #remDr$refresh()\n    webElem4 <- remDr$findElement(using = 'css selector', \"#srl-sb-submit\")\n    webElem4$clickElement()\n    webElem_totalcount <- remDr$findElements(using = 'css selector', \"#sop-totalCount\")\n    totalCount <- unlist(lapply(webElem_totalcount, function(x){x$getElementText()}))\n    \n  }\n  #totalCount\n  #class(totalCount)\n\n\n  if(round(as.numeric(totalCount)/10)==as.numeric(totalCount)/10)\n  {\n    i_page <- as.numeric(totalCount)/10\n  }\n  else\n  {\n    i_page <- round(as.numeric(totalCount)/10)+1\n  }\n  webElem_SQH <- remDr$findElements(using = 'css selector', \"td:nth-child(2) > a:nth-child(1)\")\n  SQH <- unlist(lapply(webElem_SQH, function(x){x$getElementText()}))\n  webElem_SXRQ <- remDr$findElements(using = 'css selector', \"td:nth-child(6) > span:nth-child(2)\")\n  SXRQ <- unlist(lapply(webElem_SXRQ, function(x){x$getElementText()}))\n  data_get <- rbind(data_get,data.frame(SQH,SXRQ,firmname))\n  ##!!!!!! the page more than 1 exist the bug\n  ##BUG may be in here  next page can be like this  \n  if(i_page>1)\n  {\n    for (i in 2:i_page)\n    {\n\n      link_url <- paste0(url,i)\n####navigate()这个函数没法处理timeout\n      ##??navigate\n      remDr$navigate(link_url)\n      webElem_SQH2 <- remDr$findElements(using = 'css selector', \"td:nth-child(2) > a:nth-child(1)\")\n      SQH <- unlist(lapply(webElem_SQH2, function(x){x$getElementText()}))\n      webElem_SXRQ2 <- remDr$findElements(using = 'css selector', \"td:nth-child(6) > span:nth-child(2)\")\n      SXRQ <- unlist(lapply(webElem_SXRQ2, function(x){x$getElementText()}))\n      data_get <- rbind(data_get,data.frame(SQH,SXRQ,firmname))\n    }\n    \n  }\n  \n  return (data_get)\n  \n  \n}\n\n##自动启动服务，会有BUG，尽量用外部命运符启动  auto start server\n#startServer()\n#selServ$stop()\n#rm(totalCount)\n#rm(url_data)\n\n#library(RSelenium)\nurl_data <- data.frame()\n#url_data <- read.table(\"url.csv\",header = T)\nurl_data <- read.csv(\"./files/url_firmname.csv\",header = T)\n#View(url_data)\nsite <- as.character(url_data$url)\nname <- url_data$firmname\n#head(name)\n# RSelenium::startServer() if required\n#require(RSelenium)\nremDr <- remoteDriver(remoteServerAddr = \"localhost\" \n                      , port = 4444\n                      , browserName = \"chrome\"\n)\n##??remDr <- remoteDriver$new()??##\nremDr$open()\n\n#Encoding(site[1]) <- \"bytes\"\n\n####第一次访问只执行操作，不读取数据,用了保存cookie\n\nremDr$navigate(site[1])\n\n####这里不需要获得页数，用作测试。\n#webElem_totalcount <- remDr$findElements(using = 'css selector', \"#sop-totalCount\")\n#totalCount <- lapply(webElem_totalcount, function(x){x$getElementText()})\n#class(totalCount)\n#totalCount\n#totalCount <- unlist(lapply(webElem_totalcount, function(x){x$getElementText()}))\n#class(webElem_totalcount$getElementText())\n \n\n\n#### first html click action\nwebElem <- remDr$findElement(using = 'css selector', \"#srl-m-vc > div.slTabBox > table > tbody > tr.lm-l-list > th.w120.tc > span\")\nwebElem$clickElement()\nwebElem2 <- remDr$findElement(using = 'css selector', \"body > div.field-Dialog > div > div.fl.w162.unInitFieldBox > ul > li:nth-child(7) > span\")\nwebElem2$clickElement()\nwebElem3 <- remDr$findElement(using = 'css selector', \"body > div.field-Dialog > span.field-save\")\nwebElem3$clickElement()\n\n#webElem_SQH <- remDr$findElements(using = 'css selector', \"td:nth-child(2) > a:nth-child(1)\")\n#SQH <- unlist(lapply(webElem_SQH, function(x){x$getElementText()}))\n#webElem_SXRQ <- remDr$findElements(using = 'css selector', \"td:nth-child(6) > span:nth-child(2)\")\n#SXRQ <- unlist(lapply(webElem_SXRQ, function(x){x$getElementText()}))\n#data_get <- data.frame(SQH,SXRQ)\n\n#####初始化\ndata <- data.frame()\n#class(site)\n#length(site)\n\nfor(i in 1:4)\n#for(i in 5:6)\n{\n  #data <- openHtml(site[i])\n  data <- rbind(data,openHtml(site[i],name[i]))\n\n}\n# library(parallel)\n# x <- 1:4\n# cl <- makeCluster(4) # 初始化四核心集群\n# results <- parLapply(cl,x,openHtml) # lapply的并行版本\n# data <- do.call('rbind',results) # 整合结果\n# stopCluster(cl) # 关闭集群\n\n\nwrite.csv(data,file = \"./files/SQH_SXRQ_GSM.csv\")\ndata",
    "created" : 1487471145794.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1365795850",
    "id" : "2748FBFF",
    "lastKnownWriteTime" : 1481185081,
    "last_content_update" : 1481185081,
    "path" : "~/R codes/getData_BaiTen/RSelenium_getData.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}