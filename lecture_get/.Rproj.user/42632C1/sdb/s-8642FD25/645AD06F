{
    "collab_server" : "",
    "contents" : "library(magrittr)\nlibrary(\"glmnet\")\nlibrary(caret)\nlibrary(magrittr)\nlibrary(\"e1071\")\nlibrary(pROC)\nlibrary(magrittr)\nlibrary(glmnet)\nlibrary(caret)\nlibrary(magrittr)\nlibrary(e1071)\nlibrary(pROC)\nlibrary(ROSE)\ndata_row<-read.csv(file=\"test-2.csv\",header=T,sep=\",\",fileEncoding=\"gbk\",stringsAsFactors = F)\nView(data_row)\ndim(data_row)\n#transform the Inf to NA\ndata_row[sapply(data_row,is.infinite)] <- NA\ndata <-na.omit(data_row)\n\ndata_1<-data[which(data$industry_name!=\"金融业\"),]#delete the financial industry\ndata_1 <-data_1[,-c(1,62)]#delete irrelevant information including the coding for sample and Industry name\n#View(data_1)\n\ndata_1_no<-data_1[which(data_1$default==0),]\ndata_1_yes<-data_1[which(data_1$default!=0),]\n\n(n<-dim(data_1)[1])\n(n1<-dim(data_1_no)[1])\n(n2<-dim(data_1_yes)[1])\n\n#小类平衡法\n#Sample the data\nNull_func <- function(pp){\n  #pp=0.1\n  set.seed(pp)\n  #M = 1/(n2/n1) # 不平衡比例\n  sample_yes_index = sample(n2, floor(n*pp) , replace = T)\n  \n  data_balance_yes = data_1_yes[sample_yes_index,]\n  data_balance_no = data_1_no\n  #View(data_balance_no)\n  #View(data_balance_yes)\n  #nrow(data_balance_yes)\n  #nrow(data_balance_no)\n  \n  data_balance_total <- rbind(data_balance_no, data_balance_yes)\n  #View(data_balance_total)\n  #nrow(data_balance_total)\n  \n  #depart the data into training sample and testing sample\n  n_balance <- nrow(data_balance_total)\n  sample_index <- sample(n_balance, floor(0.75*n_balance), replace = F)\n  data_tra <- data_balance_total[sample_index,]\n  data_test <- data_balance_total[-sample_index,]\n  \n  nc <- ncol(data_tra)\n  nr <- length(sample_index)\n  #View(x_tra)\n  x_tra <- data_tra[,2:nc] %>% unlist %>% as.numeric %>% matrix(nrow=nr,ncol=(nc-1))\n  y_tra <- data_tra[,1] %>% unlist %>% as.numeric \n  \n  x_test <- data_test[,2:nc] %>% unlist %>% as.numeric %>% matrix(nrow = (n_balance-nr),ncol = (nc-1))\n  y_test <- data_test[,1] %>% unlist %>% as.numeric\n  #table(y_tra)\n  #table(y_test)\n  \n  # #PART II:  Construct the model \n  # ############################################################################\n  #Choose the best tuning parameter\n  cv_fit <- cv.glmnet(x_tra, y_tra,  family = \"binomial\",nfolds=5, type.measure=\"class\")# k-fold cv for glmnet\n  #plot(cv_fit)\n  #lambda_min <- cv_fit$lambda.min  #the value of lambda that gives minmum cvm\n  lambda_lse <- cv_fit$lambda.1se  #largest value of lambda such that error is within 1 standard error of the minimum.\n  \n  #fit the model using penalizated GLM\n  fit_1 <- glmnet(x_tra, y_tra,family=\"binomial\")\n  \n  # plot(fit_1, xvar = \"lambda\")\n  #grid()\n  \n  \n  #Choose important variable by regularization\n  #coef_1 <- coef.glmnet(fit_1, s = exp(-4)) \n  #coef_index <- which(coef_1 != 0)[-1]-1\n  # coef_1 <- coef.glmnet(fit_1, s = cv_fit$lambda.1se)    # extract coefficients at lambda equals to lambda.lse\n  \n  #PART III:  Model evaluation \n  ############################################################################\n  pred_1 <-predict(fit_1, newx=x_test, s=cv_fit$lambda.1se, type = \"class\") %>% as.numeric\n  #table(pred_1)\n  #table(y_test)\n  #Confusion Matrix\n  kappa_1 = confusionMatrix(pred_1 %>% as.factor ,y_test %>% as.factor)$overall[c(1,2)]\n  #library(ROSE)\n  #accuracy.meas(y_test,pred_1)#计算准确率，召回率和F测度\n  AUC = roc.curve(y_test ,pred_1,plotit = F)$auc# 0.5分类效果很差\n  list(\"Accuarcy_kappa\" =  kappa_1, \"AUC\" = AUC)\n}\npp = seq(0.1, 1, by=0.05)\n\nresult_auc = lapply(pp,Null_func)\nresult_vector = result_auc %>% unlist\nn_t = length(result_vector)\n\nAcc = result_vector[seq(1,n_t,by=3)]\nKappa = result_vector[seq(2, n_t, by = 3)]\nAUC = result_vector[seq(3, n_t, by = 3)]\n\nAc = data.frame(c(Acc,Kappa,AUC))\n\n\nAc$fac = c(rep(\"Acc\",n_t/3), rep(\"Kappa\", n_t/3), rep(\"AUC\", n_t/3))\nView(Ac)\nnames(Ac)\n\n#ggplot()\n#boxplot(c.Acc..Kappa..AUC.~., data = Ac, col=c(2,3,4))\n#grid()\nggplot(Ac, aes(x = factor(fac), y = c.Acc..Kappa..AUC., fill = factor(fac))) +\n  # 箱线图函数\n  geom_boxplot() +\n  # 颜色标尺\n  scale_fill_brewer(palette = \"Pastel2\")\n",
    "created" : 1530412441926.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3144318125",
    "id" : "645AD06F",
    "lastKnownWriteTime" : 1530412071,
    "last_content_update" : 1530413305172,
    "path" : "~/PythonCodes/credit_rating/数据之星【20180427】.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}