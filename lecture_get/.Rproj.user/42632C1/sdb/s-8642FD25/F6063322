{
    "collab_server" : "",
    "contents" : "#PART I Data manipulation\n############################################################################\n#install.packages(\"magrittr\")\n#install.packages(\"glmnet\")\n#install.packages(\"caret\")\n#install.packages(\"e1071\")\n#install.packages(\"pROC\")\n#install.packages(\"ROSE\")\n\nlibrary(magrittr)\nlibrary(glmnet)\nlibrary(caret)\nlibrary(magrittr)\nlibrary(e1071)\nlibrary(pROC)\nlibrary(ROSE)\n\n#path <- getwd()\nsetwd(\"/Users/weijuanliang/Desktop/数据之星/3月17日\")\n\ndata_row<-read.csv(file=\"test-2.csv\",header=T,sep=\",\",fileEncoding=\"gbk\",stringsAsFactors = F)\n#View(data_row)\n#dim(data_row)\n#transform the Inf to NA\ndata_row[sapply(data_row,is.infinite)] <- NA\ndata <-na.omit(data_row)\n\ndata_1<-data[which(data$industry_name!=\"金融业\"),]#delete the financial industry\ndata_1 <-data_1[,-c(1,62)]#delete irrelevant information including the coding for sample and Industry name\n#View(data_1)\n\ndata_1_no<-data_1[which(data_1$default==0),]\ndata_1_yes<-data_1[which(data_1$default!=0),]\n\n(n<-dim(data_1)[1])\n(n1<-dim(data_1_no)[1])\n(n2<-dim(data_1_yes)[1])\n\n# #PART III：replicate\n# ############################################################################\nRep <- function(iii){\n  M = 1/(n2/n1) # 不平衡比例\n  sample_yes_index = sample(n2, floor(n*0.4) , replace = T)\n  \n  data_balance_yes = data_1_yes[sample_yes_index,]\n  data_balance_no = data_1_no\n  data_balance_total <- rbind(data_balance_no, data_balance_yes)\n  \n  \n  #depart the data into training sample and testing sample\n  n_balance <- nrow(data_balance_total)\n  sample_index <- sample(n_balance, floor(0.75*n_balance), replace = F)\n  data_tra <- data_balance_total[sample_index,]\n  data_test <- data_balance_total[-sample_index,]\n  \n  nc <- ncol(data_tra)\n  nr <- length(sample_index)\n  x_tra <- data_tra[,2:nc] %>% unlist %>% as.numeric %>% matrix(nrow=nr,ncol=(nc-1))\n  y_tra <- data_tra[,1] %>% unlist %>% as.numeric \n  \n  x_test <- data_test[,2:nc] %>% unlist %>% as.numeric %>% matrix(nrow = (n_balance-nr),ncol = (nc-1))\n  y_test <- data_test[,1] %>% unlist %>% as.numeric\n  \n  #Choose the best tuning parameter\n  cv_fit <- cv.glmnet(x_tra, y_tra,  family = \"binomial\",nfolds=5, type.measure=\"class\")# k-fold cv for glmnet\n  lambda_lse <- cv_fit$lambda.1se  #largest value of lambda such that error is within 1 standard error of the minimum.\n  \n  #fit the model using penalizated GLM\n  fit_1 <- glmnet(x_tra, y_tra,family=\"binomial\")\n  \n  #Choose important variable by regularization\n  coef_1 <- coef.glmnet(fit_1, s = cv_fit$lambda.1se)    # extract coefficients at lambda equals to lambda.lse\n  \n  #PART III:  Model evaluation \n  ############################################################################\n  pred_1 <-predict(fit_1, newx=x_test, s=cv_fit$lambda.1se, type = \"class\") %>% as.numeric\n  #Confusion Matrix\n  #confusionMatrix(pred_1 %>% as.factor ,y_test %>% as.factor)\n  #accuracy.meas(y_test,pred_1)#计算准确率，召回率和F测度\n  roc.curve(y_test ,pred_1,plotit = F)$auc # 0.5分类效果很差\n}\n\nlapply(1,Rep)\n",
    "created" : 1530413290724.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1022830054",
    "id" : "F6063322",
    "lastKnownWriteTime" : 1530412071,
    "last_content_update" : 1530412071,
    "path" : "~/PythonCodes/credit_rating/数据之星【20180426】.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}