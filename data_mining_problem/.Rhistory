ridge_mod <- glmnet(Credit[train,1:7],Credit[train,11],alpha=0)
rm(list=ls())
library(leaps)
library(ISLR)
library(pls)
library(glmnet)
#View(Credit)
MSE_ridge <- c()
MSE_lasso <- c()
MSE_pcr <- c()
attach(Credit)
Credit <- Credit[,-1]
rows <- nrow (Credit)
for (n in 1:100)
{
train <- sample (rows, 200, replace =FALSE)
ridge_mod <- glmnet(Credit[train,1:7],Credit[train,11],alpha=0)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=0)
bestlam <- cv_out$lambda.min
ridge_pred <- predict(ridge_mod,s=bestlam,newx=Credit[-train,-11])
MSE_ridge <- c(MSE_ridge,mean((ridge_pred-Credit[-train,11])^2))
lasso_mod <- glmnet(Credit[train,-11],Credit[train,11],alpha=1)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=1)
bestlam <- cv_out$lambda.min
lasso_pred <- predict(lasso_mod,s=bestlam,newx = Credit[-train,-11])
MSE_lasso <- c(MSE_lasso,mean((lasso_pred-Credit[-train,11])^2))
cv_error <- c()
for (m in 1:10) {
pcr_mod<-pcr(Balance~.,m,data=Credit,scale=T,validation="CV")
pcr_pred <- predict(pcr_mod,newx = Credit[-train,-11])
cv_error <- c(cv_error,mean((pcr_pred-Credit[-train,11])^2))
}
MSE_pcr <- c(MSE_pcr,min(cv_error))
}
mean(MSE_ridge)
mean(MSE_lasso)
mean(MSE_pcr)
ridge_mod <- glmnet(Credit[train,1:7],Credit[train,11],alpha=0)
ridge_mod <- glmnet(Credit[train,1:6],Credit[train,11],alpha=0)
Credit[train,1:6]
rm(list=ls())
library(leaps)
library(ISLR)
library(pls)
library(glmnet)
#View(Credit)
MSE_ridge <- c()
MSE_lasso <- c()
MSE_pcr <- c()
attach(Credit)
Credit <- Credit[,-1]
rows <- nrow (Credit)
for (n in 1:100)
{
train <- sample (rows, 200, replace =FALSE)
ridge_mod <- glmnet(Credit[train,1:6],Credit[train,11],alpha=0)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=0)
bestlam <- cv_out$lambda.min
ridge_pred <- predict(ridge_mod,s=bestlam,newx=Credit[-train,-11])
MSE_ridge <- c(MSE_ridge,mean((ridge_pred-Credit[-train,11])^2))
lasso_mod <- glmnet(Credit[train,-11],Credit[train,11],alpha=1)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=1)
bestlam <- cv_out$lambda.min
lasso_pred <- predict(lasso_mod,s=bestlam,newx = Credit[-train,-11])
MSE_lasso <- c(MSE_lasso,mean((lasso_pred-Credit[-train,11])^2))
cv_error <- c()
for (m in 1:10) {
pcr_mod<-pcr(Balance~.,m,data=Credit,scale=T,validation="CV")
pcr_pred <- predict(pcr_mod,newx = Credit[-train,-11])
cv_error <- c(cv_error,mean((pcr_pred-Credit[-train,11])^2))
}
MSE_pcr <- c(MSE_pcr,min(cv_error))
}
mean(MSE_ridge)
mean(MSE_lasso)
mean(MSE_pcr)
ridge_mod <- glmnet(Credit[train,1:6],Credit[train,11],alpha=0)
Credit[train,1:6]
ridge_mod <- glmnet(as.matrix(Credit[train,1:6]),Credit[train,11],alpha=0)
ridge_mod <- glmnet(as.matrix(Credit[train,1:7]),Credit[train,11],alpha=0)
rm(list=ls())
library(leaps)
library(ISLR)
library(pls)
library(glmnet)
#View(Credit)
MSE_ridge <- c()
MSE_lasso <- c()
MSE_pcr <- c()
attach(Credit)
Credit <- Credit[,-1]
rows <- nrow (Credit)
for (n in 1:100)
{
train <- sample (rows, 200, replace =FALSE)
ridge_mod <- glmnet(as.matrix(Credit[train,1:7]),Credit[train,11],alpha=0)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=0)
bestlam <- cv_out$lambda.min
ridge_pred <- predict(ridge_mod,s=bestlam,newx=Credit[-train,-11])
MSE_ridge <- c(MSE_ridge,mean((ridge_pred-Credit[-train,11])^2))
lasso_mod <- glmnet(Credit[train,-11],Credit[train,11],alpha=1)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=1)
bestlam <- cv_out$lambda.min
lasso_pred <- predict(lasso_mod,s=bestlam,newx = Credit[-train,-11])
MSE_lasso <- c(MSE_lasso,mean((lasso_pred-Credit[-train,11])^2))
cv_error <- c()
for (m in 1:10) {
pcr_mod<-pcr(Balance~.,m,data=Credit,scale=T,validation="CV")
pcr_pred <- predict(pcr_mod,newx = Credit[-train,-11])
cv_error <- c(cv_error,mean((pcr_pred-Credit[-train,11])^2))
}
MSE_pcr <- c(MSE_pcr,min(cv_error))
}
mean(MSE_ridge)
mean(MSE_lasso)
mean(MSE_pcr)
ridge_mod <- glmnet(as.matrix(Credit[train,1:7]),Credit[train,11],alpha=0)
ridge_mod <- glmnet(as.matrix(Credit[train,1:6]),Credit[train,11],alpha=0)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=0)
cv_out <- cv.glmnet(as.matrix(Credit[train,-11]),Credit[train,11],alpha=0)
x <- model.matrix(Balance~.,Credit)[-11]
x
ridge_mod <- glmnet(x[train,],Credit[train,11],alpha=0)
train <- sample (rows, 200, replace =FALSE)
x <- model.matrix(Balance~.,Credit)[-11]
x
x <- model.matrix(Balance~.,Credit)[,-11]
train <- sample (rows, 200, replace =FALSE)
ridge_mod <- glmnet(x[train,],Credit[train,11],alpha=0)
cv_out <- cv.glmnet(Credit[train,-11],Credit[train,11],alpha=0)
bestlam <- cv_out$lambda.min
rm(list=ls())
library(leaps)
library(ISLR)
library(pls)
library(glmnet)
#View(Credit)
MSE_ridge <- c()
MSE_lasso <- c()
MSE_pcr <- c()
attach(Credit)
Credit <- Credit[,-1]
rows <- nrow (Credit)
for (n in 1:100)
{
x <- model.matrix(Balance~.,Credit)[,-11]
train <- sample (rows, 200, replace =FALSE)
ridge_mod <- glmnet(x[train,],Credit[train,11],alpha=0)
cv_out <- cv.glmnet(x[train,],Credit[train,11],alpha=0)
bestlam <- cv_out$lambda.min
ridge_pred <- predict(ridge_mod,s=bestlam,newx=Credit[-train,-11])
MSE_ridge <- c(MSE_ridge,mean((ridge_pred-Credit[-train,11])^2))
lasso_mod <- glmnet(x[train,],Credit[train,11],alpha=1)
cv_out <- cv.glmnet(x[train,],Credit[train,11],alpha=1)
bestlam <- cv_out$lambda.min
lasso_pred <- predict(lasso_mod,s=bestlam,newx = Credit[-train,-11])
MSE_lasso <- c(MSE_lasso,mean((lasso_pred-Credit[-train,11])^2))
cv_error <- c()
for (m in 1:10) {
pcr_mod<-pcr(Balance~.,m,data=Credit,scale=T,validation="CV")
pcr_pred <- predict(pcr_mod,newx = Credit[-train,-11])
cv_error <- c(cv_error,mean((pcr_pred-Credit[-train,11])^2))
}
MSE_pcr <- c(MSE_pcr,min(cv_error))
}
mean(MSE_ridge)
mean(MSE_lasso)
mean(MSE_pcr)
MSE_ridge
ridge_pred <- predict(ridge_mod,s=bestlam,newx=Credit[-train,-11])
rm(list=ls())
library(leaps)
library(ISLR)
library(pls)
library(glmnet)
#View(Credit)
MSE_ridge <- c()
MSE_lasso <- c()
MSE_pcr <- c()
attach(Credit)
Credit <- Credit[,-1]
rows <- nrow (Credit)
for (n in 1:100)
{
x <- model.matrix(Balance~.,Credit)[,-11]
train <- sample (rows, 200, replace =FALSE)
ridge_mod <- glmnet(x[train,],Credit[train,11],alpha=0)
cv_out <- cv.glmnet(x[train,],Credit[train,11],alpha=0)
bestlam <- cv_out$lambda.min
ridge_pred <- predict(ridge_mod,s=bestlam,newx=x[-train,])
MSE_ridge <- c(MSE_ridge,mean((ridge_pred-Credit[-train,11])^2))
lasso_mod <- glmnet(x[train,],Credit[train,11],alpha=1)
cv_out <- cv.glmnet(x[train,],Credit[train,11],alpha=1)
bestlam <- cv_out$lambda.min
lasso_pred <- predict(lasso_mod,s=bestlam,newx = x[-train,])
MSE_lasso <- c(MSE_lasso,mean((lasso_pred-Credit[-train,11])^2))
cv_error <- c()
for (m in 1:10) {
pcr_mod<-pcr(Balance~.,m,data=Credit,scale=T,validation="CV")
pcr_pred <- predict(pcr_mod,newx = Credit[-train,-11])
cv_error <- c(cv_error,mean((pcr_pred-Credit[-train,11])^2))
}
MSE_pcr <- c(MSE_pcr,min(cv_error))
}
mean(MSE_ridge)
mean(MSE_lasso)
mean(MSE_pcr)
t <- sample(1:100,1)
n <- sample(1:100,1)
k <- sample(1:10000,1)
vi <- sample(1:200,n)
vi
n
x <- c()
k <- x%%vi
k
k <- sample(1:10000,1)
x <- c(1,2)
y <- c(2,1)
x%%y
x**y
x <- m(1,2)
y <- m(2,1)
x**y
x <- mat(1,2)
x <- c(1,2)
y <- c(2,1)
x*y
x <- c(1,2)
y <- c(2,1)
x**y
x <- matrix(c(1,2))
y <- matrix(c(2,1))
x**y
x <- matrix(c(1,2),1,2)
y <- matrix(c(2,1),2,1)
x**y
x <- matrix(c(1,2),1,2)
y <- matrix(c(2,1),2,1)
x**y
x <- matrix(c(1,2),1,2)
x
y
x <- matrix(c(1,2),2,1)
y <- matrix(c(2,1),1,2)
x**y
x*y
x <- matrix(c(1,2),2,1)
y <- matrix(c(2,1),1,2)
y
x
x*y
x**y
x <- matrix(c(1,2),2,1)
y <- matrix(c(2,1),1,2)
x**y
x%*%y
n <- sample(1:100,1)
k <- sample(1:10000,1)
vi <- sample(1:200,n)
n <- sample(1:100,1)
k <- sample(1:10000,1)
vi <- sample(1:200,n)
k
k/vi
k%vi
k%%vi
as.integer(k/vi)
library(glmnet)
Auto2 <- Auto[,1:6]
library(MASS)
Auto2 <- Auto[,1:6]
library(ISLR)
Auto2 <- Auto[,1:6]
attach(Auto2)
train_set <- Auto2[1:196,]
test_set <- Auto2[197:392,]
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
attach(Auto2)
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
train_set <- Auto2[1:196,]
test_set <- Auto2[197:392,]
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
train_set <- Auto2[1:196,]
test_set <- Auto2[197:392,]
train_set
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
train_set
train_set <- Auto2[1:196,]
test_set <- Auto2[197:392,]
glm_fit <-  glm(mpg~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
attach(Auto2)
mpg01 <- c()
for (i in 1:length(Auto2$mpg))
{
if(Auto2$mpg[i]>=median(Auto2$mpg))
Auto2$mpg01[i] <- 1
else
Auto2$mpg01[i] <- 0
}
train_set <- Auto2[1:196,]
test_set <- Auto2[197:392,]
glm_fit <-  glm(mpg01~displacement+horsepower+weight+acceleration,data=train_set,family = binomial)
summary(glm_fit)
library(xlsx)
log_penalty <- read.xlsx("新建 Microsoft Excel 工作表 (2).xlsx")
log_penalty <- read.xlsx("新建 Microsoft Excel 工作表 (2).xlsx",1)
log_penalty
library(ggplot2)
log_penalty <- read.xlsx("新建 Microsoft Excel 工作表 (2).xlsx",1,encoding="UTF-8")
log_penalty
View(log_penalty)
library(reshape2)
library(reshape2)
dfidfm <- melt(data, id.vars="平衡比例")
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable))
library(ggplot2)
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable))
dfidfm <- melt(log_penalty, id.vars="平衡比例")
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=平衡比例, y=度量指标)) + geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable),ylab='度量指标'
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable),ylab='度量指标'）
ggplot(dfidfm, aes(x=平衡比例, y=value)) + geom_line(aes(color=variable)）
dfidfm <- melt(log_penalty, id.vars="平衡比例")
ggplot(dfidfm, aes(x=平衡比例, y=value)),ylab="度量指标", + geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=平衡比例, y=value)),ylab="度量指标"+ geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=平衡比例, y=value)),+ geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=平衡比例, y=value))+ geom_line(aes(color=variable))
auc_total <- read.csv("auc_total.csv")
View(auc_total)
attach(auc_total)
auc_total$x <- as.integer(auc_total$x)
ggplot(scores,aes(x=x))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
View(auc_total)
auc_total <- read.csv("auc_total.csv")
View(auc_total)
auc_total$x <- as.double(auc_total$x)
View(auc_total)
ggplot(auc_total,aes(x=x))+
geom_histogram(binwidth =.1 ,fill="lightblue",color="black")
View(auc_total)
ggplot(auc_total,aes(x=x))+
geom_histogram(binwidth =.05 ,fill="lightblue",color="black")
auc_total$x <- as.double(auc_total$x)
ggplot(auc_total,aes(x=x))+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x),xlab="aaa")+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x),xlab="aaa")+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=t),xlab="aaa")+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x),xlab="aaa")+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x),xlab(aaa))+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x),xlab(aaa))+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x),xlab(aaa))+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")
ggplot(auc_total,aes(x=x))+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")+
labs(x = "accuracy")
ggplot(auc_total,aes(x=x))+
geom_histogram(binwidth =.01 ,fill="lightblue",color="black")+
labs(x = "AUC")
rf <- read.csv("file:///C:/Users/heyouxin/Documents/Tencent Files/277583393/FileRecv/res1.csv")
View(rf)
library(ggplot2)
library(reshape2)
dfidfm <- melt(rf, id.vars="X")
ggplot(dfidfm, aes(x=X, y=value))+ geom_line(aes(color=variable))
ggplot(dfidfm, aes(x=X, y=value))+ geom_line(aes(color=variable))+labs(x = "平衡比例")
rf_2 <- read.csv("file:///C:/Users/heyouxin/Desktop/import.csv")
p1 <- ggplot(data = rf_2, aes(x=X,y=df_report_1_toPPT2$Feature.Importance))
p1 <- p1 + geom_bar( stat="identity" , width = 0.5, fill = "cornflowerblue")
p1 + scale_x_continuous(breaks=df_report_1_toPPT2orderID, labels=df_report_1_toPPT2orderID, labels=df_report_1_toPPT2orderID, labels=df_report_1_toPPT2from_ent_level)
p1
p1 <- ggplot(data = rf_2, aes(x=X,y=df_report_1_toPPT2$Feature.Importance))
p1 <- ggplot(data = rf_2, aes(x=X,y=df_report_1_toPPT2$Feature.Importance))
p1
p1 <- ggplot(data = rf_2, aes(x=X,y=rf_2$Feature.Importance))
p1
p1 <- p1 + geom_bar( stat="identity" , width = 0.5, fill = "cornflowerblue")
p1
ggplot(rf_2, aes(X) ) + geom_bar() + coord_flip()
ggplot(rf_2, aes(X,Feature.Importance) ) + geom_bar() + coord_flip()
ggplot(rf_2, aes(X,Feature.Importance) ) + geom_bar() + coord_flip()
ggplot(rf_2, aes(x=X,y=Feature.Importance) ) + geom_bar() + coord_flip()
Feature.Importance
ggplot(rf_2, aes(x=X) ) + geom_bar() + coord_flip()
barplot(rev(rf_2$X),horiz=T,xlim=c(-4,1),axes=F,col=rep(brewer.pal(9,'YlOrRd'),each=15))
text(seq(from=0.7,length.out=135,by=1.2),x=-2,label=rev(rf_2$Feature.Importance))
barplot(rev(rf_2$X),horiz=T,xlim=c(-4,1),axes=F,col=rep(brewer.pal(9,'YlOrRd'),each=15))
p1 <- ggplot(data = rf_2, aes(x=X,y=rf_2$Feature.Importance))
p1 <- p1 + geom_bar( stat="identity" , width = 0.5, fill = "cornflowerblue")
p1
library(xlsx)
library(ggplot2)
scores <- read.xlsx("成绩汇总.xlsx",1,encoding = "UTF-8",stringsAsFactors=FALSE)
View(scores)
View(scores$成绩)
scores_3 <- scores[scores$班级==3,]
View(scores_3)
write.csv(scores_3,"class3.csv")
attach(scores)
scores$成绩 <- as.integer(scores$成绩)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
boxplot(scores$成绩)
mean(scores$成绩)
median(scores$成绩)
max(scores$成绩)
min(scores$成绩)
ggplot(scores, aes( y = 成绩)) +
# 箱线图函数
geom_boxplot() +
# 颜色标尺
scale_fill_brewer(palette = "Pastel2")
ggplot(faithful, aes(x = waiting)) +
# 直方图函数：binwidth设置组距
geom_histogram(binwidth = 5, fill = "lightblue", colour = "black")
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")+
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")+
geom_text(aes(label=count),
stat="count", color = "red",
vjust = -0.5, size = 5)
scores$成绩 <- as.integer(scores$成绩)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")+
geom_text(aes(label=..count..),
stat="count", color = "red",
vjust = -0.5, size = 5)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")+
geom_text(aes(label=..count..),
stat="count", color = "red",
vjust = -0.5, size = 10)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")+
geom_text(aes(label=..count..),
stat="count", color = "red",
vjust = 1, size = 5)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")+
geom_text(aes(label=..count..),
stat="count", color = "red",
vjust = -1, size = 5)
scores$成绩 <- as.integer(scores$成绩)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
boxplot(scores$成绩)
mean(scores$成绩)
median(scores$成绩)
max(scores$成绩)
min(scores$成绩)
ggplot(scores, aes( y = 成绩)) +
# 箱线图函数
geom_boxplot() +
# 颜色标尺
scale_fill_brewer(palette = "Pastel2")
ggplot(scores, aes( y = 成绩)) +
# 箱线图函数
geom_boxplot() +
# 颜色标尺
scale_fill_brewer(palette = "Pastel2")
boxplot(scores$成绩)
library(xlsx)
library(ggplot2)
scores <- read.xlsx("成绩汇总最终版.xlsx",1,encoding = "UTF-8",stringsAsFactors=FALSE)
#View(scores)
attach(scores)
scores$成绩 <- as.integer(scores$成绩)
ggplot(scores,aes(x=成绩))+
geom_histogram(binwidth = 10,fill="lightblue",color="black")
write.csv(scores_3,"class3.csv")
View(scores)
View(scores_3)
View(scores)
scores_3 <- scores[scores$班级==3,]
View(scores_3)
write.csv(scores_3,"class3.csv")
write.csv(scores_3,"class3.csv")
library(xlsx)
scores_3 <- read.xlsx("class3.xlsx",1)
View(scores_3)
scores_3 <- read.xlsx("class3.xlsx",1,encoding = "UTF-8")
View(scores_3)
scores_3$学号
as.character(scores_3$学号)
scores_3$学号_2 <- as.character(scores_3$学号)
scores_3$学号_2
substr(scores_3$学号_2,11,14)
View(scores_3)
scores_3$学号_2 <- substr(scores_3$学号_2,11,14)
View(scores_3)
write.xlsx(scores_3[,7:8],"class3.xlsx")
