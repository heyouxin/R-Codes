data_sample <- read.zoo(".data/hs300_hsw.csv",sep=",",header=T,format = "%Y-%m-%d")
data_sample <- read.zoo("./data/hs300_hsw.csv",sep=",",header=T,format = "%Y-%m-%d")
data_sample
data_sample <- na.omit(data_sample)
View(data_sample)
data_sample <- read.zoo("./data/hs300_hsw.csv",sep=",",header=T,format = "%Y-%m-%d")
View(data_sample)
library(gWidgetsRGtk2)
install.packages("gWidgets2RGtk2")
library(gWidgetsRGtk2)
#  参数的设定
short_period_value<-c(3,4,5,6,7,8)
long_period_value<-c(20,21,22,23,24,25,26,27,28,29,30)
dea_period_value<-c(9,10,11,12,13,14,15)
#  R环境下的GUI建立
Window<-gwindow("基于HS300的MACD回测GUI")
MACD.Window<-ggroup(cont=Window,horizontal=TRUE)
MACD.ParameterSet.Window<-ggroup(cont=MACD.Window,horizontal=FALSE)
MACD.Gframe.short<-gframe("short_period的选择",cont=MACD.ParameterSet.Window)
MACD.Gframe.long<-gframe("long_period的选择",cont=MACD.ParameterSet.Window)
MACD.Gframe.dea<-gframe("dea_period的选择",cont=MACD.ParameterSet.Window)
MACD.Trading<-gframe("选择回测交易",cont=MACD.ParameterSet.Window)
MACD.Trading.Exit<-gframe("退出回测",cont=MACD.ParameterSet.Window)
#  R环境下的GUI建立
short.list<-gdroplist(short_period_value,cont=MACD.Gframe.short)
long.list<-gdroplist(long_period_value,cont=MACD.Gframe.long)
dea.list<-gdroplist(dea_period_value,cont=MACD.Gframe.dea)
Trading.Exit.Button<-gbutton("退出交易",cont=MACD.Trading.Exit,handler=function(h,...) dispose(Window))
#  R环境下的GUI建立
#  TradingFun的构建
TradingFun<-function(h,...)
{
#  先得到设置的参数的选择
short_period<-as.numeric(svalue(short.list))
long_period<-as.numeric(svalue(long.list))
dea_period<-as.numeric(svalue(dea.list))
MACD.BackTest.Result<-MACD_BackTest(short_period,
long_period,dea_period)
#  得到回撤比率
BackTest.RetreatRatio<-
Retreat_Ratio(MACD.BackTest.Result$Dynamic)
#  作图(第一幅图)
Length<-length(BackTest.RetreatRatio)
par(mfrow=c(1,2),family='serif')
c1<-c(c(0:Length),c(Length:0))
c2<-c(c(0,BackTest.RetreatRatio),rep(0,Length+1))
plot(c1,c2,type='n',xlab='Time',
ylab='Retreat Ratio')
polygon(c1,c2,col='green',border='blue')
title('最大回测比率')
#  作图(第二幅图)
plot(MACD.BackTest.Result$Dynamic,col='red',
type='s',lwd=2,ylim=c(0,12000))
lines(MACD.BackTest.Result$Static,col='blue',type='s',lwd=2)
lines(MACD.BackTest.Result$Cash,col='gold',type='s',lwd=2)
lines(c(1:length(MACD.BackTest.Result$Cash)),
rep(10000,length(MACD.BackTest.Result$Cash)),
col='black',type='c',lwd=2)
legend(100,8000,lty=c(1,1,1),
legend=c("动态资金曲线","静态资金曲线","现金曲线"),
col=c("red","blue","gold"),hori=FALSE,bty="o")
}
Trading.Button<-gbutton("确定交易",cont=MACD.Trading,handler=TradingFun)
#  在旁边画图
MACD.Plot<-ggroup(cont=MACD.Window,expand=TRUE)
add(MACD.Plot,ggraphics())
library(gWidgetsRGtk2)
install.packages("gWidgetsRGtk2")
library(gWidgetsRGtk2)
#  参数的设定
short_period_value<-c(3,4,5,6,7,8)
long_period_value<-c(20,21,22,23,24,25,26,27,28,29,30)
dea_period_value<-c(9,10,11,12,13,14,15)
#  R环境下的GUI建立
Window<-gwindow("基于HS300的MACD回测GUI")
MACD.Window<-ggroup(cont=Window,horizontal=TRUE)
MACD.ParameterSet.Window<-ggroup(cont=MACD.Window,horizontal=FALSE)
MACD.Gframe.short<-gframe("short_period的选择",cont=MACD.ParameterSet.Window)
MACD.Gframe.long<-gframe("long_period的选择",cont=MACD.ParameterSet.Window)
MACD.Gframe.dea<-gframe("dea_period的选择",cont=MACD.ParameterSet.Window)
MACD.Trading<-gframe("选择回测交易",cont=MACD.ParameterSet.Window)
MACD.Trading.Exit<-gframe("退出回测",cont=MACD.ParameterSet.Window)
#  R环境下的GUI建立
short.list<-gdroplist(short_period_value,cont=MACD.Gframe.short)
long.list<-gdroplist(long_period_value,cont=MACD.Gframe.long)
dea.list<-gdroplist(dea_period_value,cont=MACD.Gframe.dea)
Trading.Exit.Button<-gbutton("退出交易",cont=MACD.Trading.Exit,handler=function(h,...) dispose(Window))
#  R环境下的GUI建立
#  TradingFun的构建
TradingFun<-function(h,...)
{
#  先得到设置的参数的选择
short_period<-as.numeric(svalue(short.list))
long_period<-as.numeric(svalue(long.list))
dea_period<-as.numeric(svalue(dea.list))
MACD.BackTest.Result<-MACD_BackTest(short_period,
long_period,dea_period)
#  得到回撤比率
BackTest.RetreatRatio<-
Retreat_Ratio(MACD.BackTest.Result$Dynamic)
#  作图(第一幅图)
Length<-length(BackTest.RetreatRatio)
par(mfrow=c(1,2),family='serif')
c1<-c(c(0:Length),c(Length:0))
c2<-c(c(0,BackTest.RetreatRatio),rep(0,Length+1))
plot(c1,c2,type='n',xlab='Time',
ylab='Retreat Ratio')
polygon(c1,c2,col='green',border='blue')
title('最大回测比率')
#  作图(第二幅图)
plot(MACD.BackTest.Result$Dynamic,col='red',
type='s',lwd=2,ylim=c(0,12000))
lines(MACD.BackTest.Result$Static,col='blue',type='s',lwd=2)
lines(MACD.BackTest.Result$Cash,col='gold',type='s',lwd=2)
lines(c(1:length(MACD.BackTest.Result$Cash)),
rep(10000,length(MACD.BackTest.Result$Cash)),
col='black',type='c',lwd=2)
legend(100,8000,lty=c(1,1,1),
legend=c("动态资金曲线","静态资金曲线","现金曲线"),
col=c("red","blue","gold"),hori=FALSE,bty="o")
}
Trading.Button<-gbutton("确定交易",cont=MACD.Trading,handler=TradingFun)
#  在旁边画图
MACD.Plot<-ggroup(cont=MACD.Window,expand=TRUE)
add(MACD.Plot,ggraphics())
library(gWidgetsRGtk2)
install.packages("RGtk2Extras")
library(gWidgetsRGtk2)
install.packages("RGtk2")
library(gWidgetsRGtk2)
library(gWidgets2RGtk2)
install.packages("RGtk2")
install.packages("RGtk3")
install.packages(“RGtk2”)
require(RGtk2)
install.packages(“RGtk2”)
library(caret)
library(e1071)
library(xlsx)
library(PerformanceAnalytics)
library("quantmod")
library("zoo")
data_sample <- read.zoo("./data/hs300_5.csv",sep=",",header=T,format = "%Y-%m-%d")
View(data_sample)
rm(list =ls() )
source("strategy_function.R")
library(WindR)
w.start()
A_stock <- read.table("A_stock.txt",stringsAsFactors =  F)
A_stock <- as.character(A_stock)
stockID <- getBasicFinance(A_stock)
stockID
stockID <- A_stock
date_from <- "2017-11-18"
date_to <- "2017-12-17"
w_wset_data<-w.wset('tradesuspend','startdate=2017-11-18;enddate=2017-12-17')
stock_stop <- w_wset_data$Data[,'wind_code']
##去除停牌的股票
stockID <- setdiff(stockID,stock_stop)
stockID <- unique(stockID)
stockID
MACD_data <- data.frame()
DEA_data <- data.frame()
price_close <- data.frame()
for (i in 1:5)
{
HQ_temp <- getHQ(stockID[((i-1)*50+1):(i*50)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
if(i==1)
{
MACD_data <- MACD_temp
DEA_data <- DEA_temp
price_close <- price_temp
}
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
}
HQ_temp <- getHQ(stockID[251:length(stockID)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
DEA_data
price_close
stockID
MACD_data <- data.frame()
DEA_data <- data.frame()
price_close <- data.frame()
for (i in 1:5)
{
HQ_temp <- getHQ(stockID[((i-1)*50+1):(i*50)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
if(i==1)
{
MACD_data <- MACD_temp
DEA_data <- DEA_temp
price_close <- price_temp
}
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
}
HQ_temp <- getHQ(stockID[251:length(stockID)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
w_wsd_data<-w.wsd(stockID,"MACD",date_from,date_to,"MACD_L=26;MACD_S=12;MACD_N=9;MACD_IO=3")
w_wsd_data
stockID
stockID <- getBasicFinance(A_stock)
stockID <- A_stock
date_from <- "2017-11-18"
date_to <- "2017-12-17"
w_wset_data<-w.wset('tradesuspend','startdate=2017-11-18;enddate=2017-12-17')
stock_stop <- w_wset_data$Data[,'wind_code']
##去除停牌的股票
stockID <- setdiff(stockID,stock_stop)
stockID <- unique(stockID)
stockID
stockID <- getBasicFinance(A_stock)
date_from <- "2017-11-18"
date_to <- "2017-12-17"
w_wset_data<-w.wset('tradesuspend','startdate=2017-11-18;enddate=2017-12-17')
stock_stop <- w_wset_data$Data[,'wind_code']
##去除停牌的股票
stockID <- setdiff(stockID,stock_stop)
stockID <- unique(stockID)
MACD_data <- data.frame()
DEA_data <- data.frame()
price_close <- data.frame()
for (i in 1:5)
{
HQ_temp <- getHQ(stockID[((i-1)*50+1):(i*50)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
if(i==1)
{
MACD_data <- MACD_temp
DEA_data <- DEA_temp
price_close <- price_temp
}
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
}
HQ_temp <- getHQ(stockID[251:length(stockID)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
DEA_data
price_close
stock_DEA <- upByDEA(DEA_data,price_close)
stock_DEA
stock_long <- stock_DEA
MinHQ <- getMinHQ(stock_long)
MinHQ
MinHQ_2 <- unstack(MinHQ,close~windcode)
stock_short <- downByMinHQ(MinHQ_2)
stock_short
save.image("~/R codes/myQuant/12_18_data.RData")
load("~/R codes/myQuant/12_18_data.RData")
A_stock
stockID
library(caret)
library(e1071)
library(xlsx)
library(PerformanceAnalytics)
library("quantmod")
library("zoo")
data_sample <- read.zoo("./data/hs300_5.csv",sep=",",header=T,format = "%Y-%m-%d")
data_sample <- na.omit(data_sample)
View(data_sample)
data_sample['2015-01-01':'2016-12-31']
data_sample['2015-01-01::2016-12-31']
data_sample['2015-01-01::2016-12-31']
data_sample
View(data_sample)
data_sample['2015-01-01: :2016-12-31']
data1 <- data_sample['2015-01-01::2016-12-31']
data1
index(data_sample)
library(caret)
library(e1071)
library(PerformanceAnalytics)
library("quantmod")
library("zoo")
data_sample <- read.zoo("./data/hs300_5.csv",sep=",",header=T,format = "%Y-%m-%d")
data_sample <- na.omit(data_sample)
View(data_sample)
chartSeries(data_sample[,c(1:5)])
chartSeries(data_sample[,c(1:5)],theme = 'white',name='沪深300指数2006-2017年K线图',up.col = 'red',dn.col = 'green')
chartSeries(to.monthly(data_sample[,c(1:5)]),theme = 'white',name='沪深300指数2006-2017年K线图',up.col = 'red',dn.col = 'green')
insams<- "2005-01-01"
insame<- "2016-12-31"
osams<- "2017-01-01"
osame<- "2017-12-31"
inrow <- which(index(data_sample) >= insams & index(data_sample) <= insame)
outrow <- which(index(data_sample) >= osams & index(data_sample) <= osame)
outrow
chartSeries(to.monthly(data_sample[2641:2866,c(1:5)]),theme = 'white',name='沪深300指数2006-2017年K线图',up.col = 'red',dn.col = 'green')
chartSeries(to.monthly(data_sample[2641:2866,c(1:5)]),theme = 'black',name='沪深300指数2006-2017年K线图',up.col = 'red',dn.col = 'green')
chartSeries(to.monthly(data_sample[2641:2866,c(1:5)]),theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
chartSeries(data_sample[2641:2866,c(1:5)],theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
chartSeries(data_sample[2641:2866,c(1:5)],theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
fit <- lm(ret~open+close+high+low+volume+mv10+mv20+vol10+vol20+rsi5+rsi14+macd.macd1+signal.macd1+macd.macd2+signal.macd2+dn+mavg+up+pctB+ret_cur+ret_lag1+ret_lag2,data = data_sample)
chartSeries(data_sample[2641:2866,c(1:5)],theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
chartSeries(to.weekly(data_sample[2641:2866,c(1:5)]),theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
chartSeries(data_sample[2641:2866,c(1:5)],theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
source("get_Data.R")
BackTestSample<-get_Data("000300.ss","2016-01-01","2017-12-01",500)
source("get_Data.R")
BackTestSample<-get_Data("000300.ss","2016-01-01","2017-12-01",500)
BackTestSample
BackTestSample<-get_Data("000300.sz","2016-01-01","2017-12-01",500)
BackTestSample<-get_Data("000300.sz","2016-01-01","2017-12-01",500)
BackTestSample<-get_Data("000001.sz","2016-01-01","2017-12-01",500)
source("get_Data.R")
BackTestSample<-get_Data("000001.sz","2016-01-01","2017-12-01",500)
BackTestSample
BackTestSample<-get_Data("000001.SH","2016-01-01","2017-12-01",500)
data_sample[,'ret']
chart.CumReturns(data_sample[,'ret'],main='cumulative return')
library(PerformanceAnalytics)
chart.CumReturns(data_sample[,'ret'],main='cumulative return')
chart.CumReturns(data_sample[,'ret_cur'],main='cumulative return')
chart.CumReturns(data_sample[,'ret_cur'],main='cumulative return')
chart.CumReturns(data_sample[2641:2866,'ret_cur'],main='cumulative return')
insams<- "2005-01-01"
insame<- "2016-12-31"
osams<- "2017-01-01"
osame<- "2017-12-31"
inrow <- which(index(data_sample) >= insams & index(data_sample) <= insame)
outrow <- which(index(data_sample) >= osams & index(data_sample) <= osame)
library(e1071)
model1 <- svm(x[inrow,],y[inrow],type="C-classification",kernel = "polynomial")
pred1 <- predict(model1,x[outrow,])
#table(pred1,y[outrow])
outresult_out<- confusionMatrix(pred1,y[outrow])
outresult_out
library(caret)
library(e1071)
library(PerformanceAnalytics)
library("quantmod")
library("zoo")
## 由以上结果可知，使用SVM进行分类，type="C-classification",kernel = "polynomial"的模型最优。
model1 <- svm(x[inrow,],y[inrow],type="C-classification",kernel = "polynomial")
pred1 <- predict(model1,x[outrow,])
#table(pred1,y[outrow])
outresult_out<- confusionMatrix(pred1,y[outrow])
outresult_out
x <- data_sample[,-c(20,21)]
y <- data_sample[,20]
model1 <- svm(x[inrow,],y[inrow],type="C-classification",kernel = "polynomial")
pred1 <- predict(model1,x[outrow,])
#table(pred1,y[outrow])
outresult_out<- confusionMatrix(pred1,y[outrow])
outresult_out
model1 <- svm(x[inrow,],y[inrow],type="C-classification",kernel = "radial")
pred1 <- predict(model1,x[outrow,])
#table(pred1,y[outrow])
outresult_out<- confusionMatrix(pred1,y[outrow])
outresult_out
date_from <- "2017-12-01"
date_to <- "2018-01-02"
w_wset_data<-w.wset('tradesuspend','startdate=2017-12-01;enddate=2018-01-02')
stock_stop <- w_wset_data$Data[,'wind_code']
##去除停牌的股票
stockID <- setdiff(stockID,stock_stop)
stockID <- unique(stockID)
#length(stockID)
MACD_data <- data.frame()
DEA_data <- data.frame()
price_close <- data.frame()
for (i in 1:5)
{
HQ_temp <- getHQ(stockID[((i-1)*50+1):(i*50)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
if(i==1)
{
MACD_data <- MACD_temp
DEA_data <- DEA_temp
price_close <- price_temp
}
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
}
HQ_temp <- getHQ(stockID[251:length(stockID)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
stock_DEA <- upByDEA(DEA_data,price_close)
source("strategy_function.R")
library(WindR)
w.start()
date_from <- "2017-12-01"
date_to <- "2018-01-02"
w_wset_data<-w.wset('tradesuspend','startdate=2017-12-01;enddate=2018-01-02')
stock_stop <- w_wset_data$Data[,'wind_code']
##去除停牌的股票
stockID <- setdiff(stockID,stock_stop)
stockID <- unique(stockID)
#length(stockID)
MACD_data <- data.frame()
DEA_data <- data.frame()
price_close <- data.frame()
for (i in 1:5)
{
HQ_temp <- getHQ(stockID[((i-1)*50+1):(i*50)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
if(i==1)
{
MACD_data <- MACD_temp
DEA_data <- DEA_temp
price_close <- price_temp
}
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
}
HQ_temp <- getHQ(stockID[251:length(stockID)],date_from,date_to)
MACD_temp <- HQ_temp[[1]]
DEA_temp <- HQ_temp[[2]]
price_temp <- HQ_temp[[3]]
MACD_data <- cbind(MACD_data,MACD_temp)
DEA_data <- cbind(DEA_data,DEA_temp)
price_close <- cbind(price_close,price_temp)
stock_DEA <- upByDEA(DEA_data,price_close)
stock_DEA
library(caret)
library(e1071)
library(PerformanceAnalytics)
library("quantmod")
library("zoo")
## 读文件，确定自变量和因变量
data_sample <- read.zoo("./data/hs300_5.csv",sep=",",header=T,format = "%Y-%m-%d")
data_sample <- na.omit(data_sample)
View(data_sample)
chart.CumReturns(data_sa`data_samplemple[2641:2866,'ret_cur'],main='cumulative return')
chartSeries(to.weekly(data_sample[2641:2866,c(1:5)]),theme = 'white',name='沪深300指数2017年月K线图',up.col = 'red',dn.col = 'green')
fit <- lm(ret~open+close+high+low+volume+mv10+mv20+vol10+vol20+rsi5+rsi14+macd.macd1+signal.macd1+macd.macd2+signal.macd2+dn+mavg+up+pctB+ret_cur+ret_lag1+ret_lag2,data = data_sample)
summary(fit)
#使用显著的变量作为X
x <- data_sample[,c(1,3,19,23)]
View(x)
y <- data_sample[,20]
View(y)
#使用所有变量作为X
x <- data_sample[,-c(20,21)]
View(x)
y <- data_sample[,20]
View(y)
insams<- "2005-01-01"
insame<- "2016-12-31"
osams<- "2017-01-01"
osame<- "2017-12-31"
inrow <- which(index(data_sample) >= insams & index(data_sample) <= insame)
outrow <- which(index(data_sample) >= osams & index(data_sample) <= osame)
## 计算SVM在2种分类机，4种核函数下模型的错误次数
type <- c("C-classification","nu-classification")
kernel <- c("linear","polynomial","radial","sigmoid")
accuracy <- matrix(0,2,4)
for (i in 1:2)
{
for ( j in 1:4)
{
model <- svm(x[inrow,],y[inrow],type=type[i],kernel = kernel[j])
pred_temp <- predict(model,x[outrow])
accuracy[i,j] <- sum(pred_temp!=as.vector(y[outrow]))
}
}
dimnames(accuracy) <- list(type,kernel)
accuracy
## 由以上结果可知，使用SVM进行分类，type="C-classification",kernel = "polynomial"的模型最优。
model1 <- svm(x[inrow,],y[inrow],type="C-classification",kernel = "radial")
pred1 <- predict(model1,x[outrow,])
#table(pred1,y[outrow])
outresult_out<- confusionMatrix(pred1,y[outrow])
outresult_out
# Performance
signal <- ifelse( pred1==1 | pred1==2,1,ifelse(pred1==-2 ,-1,0))
#signal <- ifelse( pred1==1 | pred1==2 | pred1==1,1,0)
#signal <- ifelse( pred1==1 | pred1==2,1,0)
simreturn <- data_sample$ret[outrow]
cost <- 0
strategy_return <- Lag(simreturn)*Lag(signal)-cost
cumm_return<- Return.cumulative(strategy_return)
annual_return <- Return.annualized(strategy_return)
charts.PerformanceSummary(strategy_return)
x
data <- read.csv("C:/Users/heyouxin/Documents/PythonCodes/credit_rating/test-2.csv")
